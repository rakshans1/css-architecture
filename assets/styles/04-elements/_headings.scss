/**
 * Titles
 *
 * Construct each titles tags and associate classes
 *
 * @param   $font-size      font-size (px without unit)
 * @param   $line-height    line-height (px whithout unit)
 * @param   $weight         font-weight (from .psd)
 * @param   $family         font-family (variable)
 * @param   $letter-spacing letter-spacing (from .psd)
 * @type    nested map
 */
$titles: (
  h1: (
      25,
      30,
      map-get( map-get( $font, weights ), medium ),
      map-get( map-get( $font, families ), title ),
      0
  ),

  h2: (
      20,
      24,
      map-get( map-get( $font, weights ), medium ),
      map-get( map-get( $font, families ), body ),
      0
  ),

  h3: (
      17.5,
      21,
      map-get( map-get( $font, weights ), medium ),
      map-get( map-get( $font, families ), body ),
      0
  ),

  h4: (
      15,
      18,
      map-get( map-get( $font, weights ), medium ),
      map-get( map-get( $font, families ), body ),
      0
  ),

  h5: (
      12.5,
      15,
      map-get( map-get( $font, weights ), medium ),
      map-get( map-get( $font, families ), body ),
      0
  ),

  h6: (
      10,
      12,
      map-get( map-get( $font, weights ), medium ),
      map-get( map-get( $font, families ), body ),
      0
  )
);

/**
 * Loop through $titles
 *
 * Each $key and $value find in $titles
 */
@each $title, $value in $titles {

  /**
   * Private var
   *
   * Get and stock all values from each keys in map
   */
    $font-size: nth( $value, 1 );
    $line-height: nth( $value, 2 );
    $weight: nth( $value, 3 );
    $family: nth( $value, 4 );
    $letter-spacing: nth( $value, 5 );


/**
* Generate tag and class selector
*/
  #{ $title }, .#{ $title } {
    // Include mixin
    @include letter-spacing( $letter-spacing );

    font: {
        family: $family;
        size: ( $font-size / 10 ) * 1rem;
        weight: $weight;
    }

    @if $line-height == normal {
        line-height: normal;
    } @else {
    line-height: $line-height / $font-size;
    }
  }
};